
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005cb  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000553  00000000  00000000  0000075b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e3  00000000  00000000  00000cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00000e94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000312  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  000011ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001237  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */ 
# include <avr/io.h>
# include <avr/interrupt.h>
int main ( )
{
	DDRC =1<<3;  // led
  6c:	88 e0       	ldi	r24, 0x08	; 8
  6e:	84 bb       	out	0x14, r24	; 20
	MCUCR |= (1<<ISC01)|(1<<ISC00) ; // +ve (rising) edge trigger 
  70:	85 b7       	in	r24, 0x35	; 53
  72:	83 60       	ori	r24, 0x03	; 3
  74:	85 bf       	out	0x35, r24	; 53
	//MCUCR |= (1<<ISC01) ; // falling edge trigger
    //MCUCR |= (1<<ISC00) ; // any logical change trigger
	GICR= (1<<INT0);
  76:	80 e4       	ldi	r24, 0x40	; 64
  78:	8b bf       	out	0x3b, r24	; 59
	//PORTC = (1<<3);
	sei();
  7a:	78 94       	sei
  7c:	ff cf       	rjmp	.-2      	; 0x7c <main+0x10>

0000007e <__vector_1>:
	while (1) ;

}

ISR (INT0_vect )
{
  7e:	1f 92       	push	r1
  80:	0f 92       	push	r0
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	0f 92       	push	r0
  86:	11 24       	eor	r1, r1
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
	PORTC ^= (1<<3); // change state (toggle)
  8c:	95 b3       	in	r25, 0x15	; 21
  8e:	88 e0       	ldi	r24, 0x08	; 8
  90:	89 27       	eor	r24, r25
  92:	85 bb       	out	0x15, r24	; 21
	
}
  94:	9f 91       	pop	r25
  96:	8f 91       	pop	r24
  98:	0f 90       	pop	r0
  9a:	0f be       	out	0x3f, r0	; 63
  9c:	0f 90       	pop	r0
  9e:	1f 90       	pop	r1
  a0:	18 95       	reti

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
